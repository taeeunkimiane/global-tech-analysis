version: '3.8'

# 프로덕션 환경용 Docker Compose 오버라이드
services:
  global-tech-analysis:
    environment:
      - ENVIRONMENT=production
      - DEBUG=false
      - LOG_LEVEL=WARNING
      - STREAMLIT_SERVER_HEADLESS=true
      - STREAMLIT_BROWSER_GATHER_USAGE_STATS=false
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  nginx:
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  redis:
    deploy:
      resources:
        limits:
          cpus: '0.3'
          memory: 256M
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "3"

  data-collector:
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # 프로덕션 전용 서비스들
  
  # PostgreSQL 데이터베이스 (확장용)
  postgres:
    image: postgres:15-alpine
    container_name: tech-analysis-postgres
    environment:
      POSTGRES_DB: tech_analysis
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    networks:
      - tech-analysis-network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Prometheus 모니터링
  prometheus:
    image: prom/prometheus:latest
    container_name: tech-analysis-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - tech-analysis-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # Grafana 대시보드
  grafana:
    image: grafana/grafana:latest
    container_name: tech-analysis-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - tech-analysis-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # ElasticSearch (로그 분석용)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: tech-analysis-elasticsearch
    environment:
      - node.name=es01
      - cluster.name=tech-analysis-logs
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - tech-analysis-network

  # Kibana (로그 시각화)
  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: tech-analysis-kibana
    ports:
      - "5601:5601"
    environment:
      ELASTICSEARCH_URL: http://elasticsearch:9200
      ELASTICSEARCH_HOSTS: '["http://elasticsearch:9200"]'
    networks:
      - tech-analysis-network
    depends_on:
      - elasticsearch

  # Logstash (로그 수집)
  logstash:
    image: docker.elastic.co/logstash/logstash:8.8.0
    container_name: tech-analysis-logstash
    volumes:
      - ./monitoring/logstash/pipeline:/usr/share/logstash/pipeline:ro
      - ./logs:/logs:ro
    ports:
      - "5000:5000"
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
    networks:
      - tech-analysis-network
    depends_on:
      - elasticsearch

  # 백업 서비스
  backup:
    image: alpine:latest
    container_name: tech-analysis-backup
    volumes:
      - ./data:/data:ro
      - ./backups:/backups
      - postgres_data:/postgres_data:ro
    command: |
      sh -c "
        apk add --no-cache postgresql-client aws-cli &&
        while true; do
          echo 'Starting backup...'
          DATE=\$$(date +%Y%m%d_%H%M%S)
          
          # 데이터 파일 백업
          tar czf /backups/data_backup_\$$DATE.tar.gz -C /data .
          
          # PostgreSQL 백업
          PGPASSWORD=\$$DB_PASSWORD pg_dump -h postgres -U postgres tech_analysis > /backups/db_backup_\$$DATE.sql
          
          # 오래된 백업 파일 정리 (7일 이상)
          find /backups -name '*.tar.gz' -mtime +7 -delete
          find /backups -name '*.sql' -mtime +7 -delete
          
          echo 'Backup completed'
          sleep 86400  # 24시간 대기
        done
      "
    environment:
      - DB_PASSWORD=${DB_PASSWORD}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    networks:
      - tech-analysis-network
    depends_on:
      - postgres
    restart: unless-stopped

volumes:
  postgres_data:
  prometheus_data:
  grafana_data:
  elasticsearch_data:
  nginx_logs:

networks:
  tech-analysis-network:
    driver: bridge
