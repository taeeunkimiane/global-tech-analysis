version: '3.8'

services:
  # 메인 Streamlit 애플리케이션
  global-tech-analysis:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: global-tech-analysis
    ports:
      - "8501:8501"
    volumes:
      # 데이터 영속성을 위한 볼륨 마운트
      - ./data:/app/data
      - ./config:/app/config
    environment:
      - PYTHONPATH=/app
      - STREAMLIT_SERVER_PORT=8501
      - STREAMLIT_SERVER_ADDRESS=0.0.0.0
      - STREAMLIT_SERVER_HEADLESS=true
      - STREAMLIT_BROWSER_GATHER_USAGE_STATS=false
      - TZ=Asia/Seoul
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - tech-analysis-network

  # Redis 캐시 서버 (선택사항 - 성능 향상용)
  redis:
    image: redis:7-alpine
    container_name: tech-analysis-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    command: redis-server --appendonly yes
    networks:
      - tech-analysis-network

  # Nginx 리버스 프록시 (프로덕션 환경용)
  nginx:
    image: nginx:alpine
    container_name: tech-analysis-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - global-tech-analysis
    restart: unless-stopped
    networks:
      - tech-analysis-network

  # 데이터 수집 스케줄러 (선택사항)
  data-collector:
    build:
      context: .
      dockerfile: Dockerfile.collector
    container_name: tech-data-collector
    volumes:
      - ./data:/app/data
      - ./config:/app/config
    environment:
      - PYTHONPATH=/app
      - COLLECTION_INTERVAL=3600  # 1시간마다 수집
    restart: unless-stopped
    depends_on:
      - redis
    networks:
      - tech-analysis-network

volumes:
  redis_data:
    driver: local

networks:
  tech-analysis-network:
    driver: bridge
